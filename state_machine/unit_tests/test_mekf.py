import unittest
import sys
from numpy import testing, array, eye

sys.path.insert(0, './state_machine/applications/flight')

import lib.mekf as mekf  # noqa: E402


class PropogationTest(unittest.TestCase):

    def test(self):
        expect = array([[0.5931645151518956, 0.42554207999942495, 0.5398640677185691, 0.41906632470378713]]).transpose()
        testing.assert_almost_equal(
            expect,
            mekf.propagate_state(
                array([[0.5, 0.5, 0.5, 0.5]]).transpose(),
                array([[0.324, 0.24, 0.9]]).transpose(),
                array([[0.23, 0.12, 0.321]]).transpose(),
                0.5
            )
        )

        expect = array([[-0.5242460284827297, 0.7105953066479479, 0.250513925250434, -0.39681631146616725]]).transpose()
        testing.assert_almost_equal(
            expect,
            mekf.propagate_state(
                array([[-0.5244311817641283, 0.7083212680159963, 0.2543322132742208, -0.3982060297895143]]).transpose(),
                array([[0.0, 0.0, 0.0]]).transpose(),
                array([[-0.03134203276802751, 0.7690511428713179, 0.5255725869290838]]).transpose(),
                0.01
            )
        )

class StepTest(unittest.TestCase):

    def test(self):
        mekf.q = array([[-0.5244311817641283, 0.7083212680159963, 0.2543322132742208, -0.3982060297895143]]).transpose()
        mekf.β = array([[0.0, 0.0, 0.0]]).transpose()
        mekf.P = eye(6)
        ω = array([[-0.03134203276802751, 0.7690511428713179, 0.5255725869290838]]).transpose()
        δt = 0.01
        nr_mag = array([[0.015244887457549145, 0.3645034795343308, 0.9310772292424365]]).transpose()
        nr_sun = array([[-0.3682401487206261, -0.8530190736851052, -0.36980758888862214]]).transpose()
        br_mag = array([[-0.773291596140397, 0.444607621094291, -0.4520444343242299]]).transpose()
        br_sun = array([[0.1185516791063305, -0.17585915364213228, 0.9772507648814316]]).transpose()
        mekf.step(ω, δt, nr_mag, nr_sun, br_mag, br_sun)
        nq = array([[-0.5282772515426587, 0.7237898826790824, 0.21966053616059897, -0.38574680826621643]]).transpose()
        nβ = array([[0.00032047222397140845, -5.7257225279091376e-6, 0.0007826093647220573]]).transpose()
        nP = array([[1.0784908616307623e-6, -3.8349511370897766e-7, 7.671919291671058e-7, -1.0783819450543119e-8, 3.834563846141316e-9, -7.671144506075945e-9],
                    [-3.834951137089777e-7, 7.590162605261457e-7, -5.489610574245077e-7,
                        3.8345638461413174e-9, -7.589396076257766e-9, 5.489056179570935e-9],
                    [7.671919291671059e-7, -5.489610574245077e-7, 1.8578027994709481e-6, -
                        7.671144506075947e-9, 5.48905617957094e-9, -1.8576151803377335e-8],
                    [-1.078381945054312e-8, 3.834563846141318e-9, -7.671144506075945e-9,
                        0.9999010102068072, -3.834176594296537e-11, 7.670369798752289e-11],
                    [3.834563846141316e-9, -7.589396076257766e-9, 5.489056179570941e-9, -
                        3.834176594296536e-11, 0.9999010101748662, -5.4885018411473283e-11],
                    [-7.671144506075942e-9, 5.489056179570935e-9, -1.857615180337733e-8, 7.670369798752288e-11, -5.4885018411473283e-11, 0.9999010102847227]])
        testing.assert_almost_equal(mekf.q, nq)
        testing.assert_almost_equal(mekf.β, nβ)
        testing.assert_almost_equal(mekf.P, nP)
